type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ContributionCreated @entity(immutable: true) {
  id: Bytes!
  assertionId: Bytes! # bytes32
  formID: BigInt! # uint256
  contributionCID: String! # string
  rows: BigInt! # uint256
  contributor: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DatasetCreated @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  formCID: String! # string
  mintPrice: BigInt! # uint256
  tokenTreasury: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestCreated @entity(immutable: true) {
  id: Bytes!
  formID: BigInt! # uint256
  requestName: String! # string
  requestDescription: String! # string
  category: String! # string
  dataFormatCID: String! # string
  requiredEntries: BigInt! # uint256
  minSubRows: BigInt! # uint256
  creator: Bytes! # address
  claimGroups: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferBatch @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  ids: [BigInt!]! # uint256[]
  values: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferSingle @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  Contract_id: BigInt! # uint256
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type URI @entity(immutable: true) {
  id: Bytes!
  value: String! # string
  Contract_id: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type assertionVote @entity(immutable: true) {
  id: Bytes!
  assertionID: Bytes! # bytes32
  voter: Bytes! # address
  vote: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type contributionAssertionCreated @entity(immutable: true) {
  id: Bytes!
  formID: BigInt! # uint256
  assertionID: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type datasetAssertionCreated @entity(immutable: true) {
  id: Bytes!
  formID: BigInt! # uint256
  assertionID: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
