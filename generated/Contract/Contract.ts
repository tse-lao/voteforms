// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ContributionCreated extends ethereum.Event {
  get params(): ContributionCreated__Params {
    return new ContributionCreated__Params(this);
  }
}

export class ContributionCreated__Params {
  _event: ContributionCreated;

  constructor(event: ContributionCreated) {
    this._event = event;
  }

  get assertionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get formID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get contributionCID(): string {
    return this._event.parameters[2].value.toString();
  }

  get rows(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get contributor(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class DatasetCreated extends ethereum.Event {
  get params(): DatasetCreated__Params {
    return new DatasetCreated__Params(this);
  }
}

export class DatasetCreated__Params {
  _event: DatasetCreated;

  constructor(event: DatasetCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get formCID(): string {
    return this._event.parameters[1].value.toString();
  }

  get mintPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenTreasury(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RequestCreated extends ethereum.Event {
  get params(): RequestCreated__Params {
    return new RequestCreated__Params(this);
  }
}

export class RequestCreated__Params {
  _event: RequestCreated;

  constructor(event: RequestCreated) {
    this._event = event;
  }

  get formID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get requestName(): string {
    return this._event.parameters[1].value.toString();
  }

  get requestDescription(): string {
    return this._event.parameters[2].value.toString();
  }

  get category(): string {
    return this._event.parameters[3].value.toString();
  }

  get dataFormatCID(): string {
    return this._event.parameters[4].value.toString();
  }

  get requiredEntries(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get minSubRows(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get claimGroups(): string {
    return this._event.parameters[8].value.toString();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class assertionVote extends ethereum.Event {
  get params(): assertionVote__Params {
    return new assertionVote__Params(this);
  }
}

export class assertionVote__Params {
  _event: assertionVote;

  constructor(event: assertionVote) {
    this._event = event;
  }

  get assertionID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get vote(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class contributionAssertionCreated extends ethereum.Event {
  get params(): contributionAssertionCreated__Params {
    return new contributionAssertionCreated__Params(this);
  }
}

export class contributionAssertionCreated__Params {
  _event: contributionAssertionCreated;

  constructor(event: contributionAssertionCreated) {
    this._event = event;
  }

  get formID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assertionID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class datasetAssertionCreated extends ethereum.Event {
  get params(): datasetAssertionCreated__Params {
    return new datasetAssertionCreated__Params(this);
  }
}

export class datasetAssertionCreated__Params {
  _event: datasetAssertionCreated;

  constructor(event: datasetAssertionCreated) {
    this._event = event;
  }

  get formID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assertionID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Contract__assertionVotingPhaseResult {
  value0: BigInt;
  value1: boolean;
  value2: BigInt;
  value3: BigInt;
  value4: Bytes;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: boolean,
    value2: BigInt,
    value3: BigInt,
    value4: Bytes,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getFormID(): BigInt {
    return this.value0;
  }

  getResolutionType(): boolean {
    return this.value1;
  }

  getVotingEndTime(): BigInt {
    return this.value2;
  }

  getTime(): BigInt {
    return this.value3;
  }

  getAncillaryData(): Bytes {
    return this.value4;
  }

  getUpvotes(): BigInt {
    return this.value5;
  }

  getDownvotes(): BigInt {
    return this.value6;
  }
}

export class Contract__getFormClaimsResultValue0Struct extends ethereum.Tuple {
  get claimType(): i32 {
    return this[0].toI32();
  }

  get groupId(): Bytes {
    return this[1].toBytes();
  }

  get groupTimestamp(): Bytes {
    return this[2].toBytes();
  }

  get value(): BigInt {
    return this[3].toBigInt();
  }

  get isOptional(): boolean {
    return this[4].toBoolean();
  }

  get isSelectableByUser(): boolean {
    return this[5].toBoolean();
  }

  get extraData(): Bytes {
    return this[6].toBytes();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  Identifier(): Bytes {
    let result = super.call("Identifier", "Identifier():(bytes32)", []);

    return result[0].toBytes();
  }

  try_Identifier(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("Identifier", "Identifier():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  assertionVotingPhase(param0: Bytes): Contract__assertionVotingPhaseResult {
    let result = super.call(
      "assertionVotingPhase",
      "assertionVotingPhase(bytes32):(uint256,bool,uint256,uint256,bytes,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Contract__assertionVotingPhaseResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBytes(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_assertionVotingPhase(
    param0: Bytes
  ): ethereum.CallResult<Contract__assertionVotingPhaseResult> {
    let result = super.tryCall(
      "assertionVotingPhase",
      "assertionVotingPhase(bytes32):(uint256,bool,uint256,uint256,bytes,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__assertionVotingPhaseResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBytes(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAssertions(_formID: BigInt): Array<Bytes> {
    let result = super.call(
      "getAssertions",
      "getAssertions(uint256):(bytes32[])",
      [ethereum.Value.fromUnsignedBigInt(_formID)]
    );

    return result[0].toBytesArray();
  }

  try_getAssertions(_formID: BigInt): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getAssertions",
      "getAssertions(uint256):(bytes32[])",
      [ethereum.Value.fromUnsignedBigInt(_formID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getAvailableAssertions(_formID: BigInt): Array<Bytes> {
    let result = super.call(
      "getAvailableAssertions",
      "getAvailableAssertions(uint256):(bytes32[])",
      [ethereum.Value.fromUnsignedBigInt(_formID)]
    );

    return result[0].toBytesArray();
  }

  try_getAvailableAssertions(
    _formID: BigInt
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getAvailableAssertions",
      "getAvailableAssertions(uint256):(bytes32[])",
      [ethereum.Value.fromUnsignedBigInt(_formID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getFormClaims(
    _formID: BigInt
  ): Array<Contract__getFormClaimsResultValue0Struct> {
    let result = super.call(
      "getFormClaims",
      "getFormClaims(uint256):((uint8,bytes16,bytes16,uint256,bool,bool,bytes)[])",
      [ethereum.Value.fromUnsignedBigInt(_formID)]
    );

    return result[0].toTupleArray<Contract__getFormClaimsResultValue0Struct>();
  }

  try_getFormClaims(
    _formID: BigInt
  ): ethereum.CallResult<Array<Contract__getFormClaimsResultValue0Struct>> {
    let result = super.tryCall(
      "getFormClaims",
      "getFormClaims(uint256):((uint8,bytes16,bytes16,uint256,bool,bool,bytes)[])",
      [ethereum.Value.fromUnsignedBigInt(_formID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__getFormClaimsResultValue0Struct>()
    );
  }

  getRequestAdminRole(_formID: BigInt): Bytes {
    let result = super.call(
      "getRequestAdminRole",
      "getRequestAdminRole(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_formID)]
    );

    return result[0].toBytes();
  }

  try_getRequestAdminRole(_formID: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRequestAdminRole",
      "getRequestAdminRole(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_formID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRequestContributorRole(_formID: BigInt): Bytes {
    let result = super.call(
      "getRequestContributorRole",
      "getRequestContributorRole(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_formID)]
    );

    return result[0].toBytes();
  }

  try_getRequestContributorRole(_formID: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRequestContributorRole",
      "getRequestContributorRole(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_formID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasAccess(user: Address, _formID: BigInt): boolean {
    let result = super.call("hasAccess", "hasAccess(address,uint256):(bool)", [
      ethereum.Value.fromAddress(user),
      ethereum.Value.fromUnsignedBigInt(_formID)
    ]);

    return result[0].toBoolean();
  }

  try_hasAccess(user: Address, _formID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAccess",
      "hasAccess(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_formID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isContract(addr: Address): boolean {
    let result = super.call("isContract", "isContract(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);

    return result[0].toBoolean();
  }

  try_isContract(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isContract", "isContract(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDisputeAllowed(assertionID: Bytes, disputer: Address): boolean {
    let result = super.call(
      "isDisputeAllowed",
      "isDisputeAllowed(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(assertionID),
        ethereum.Value.fromAddress(disputer)
      ]
    );

    return result[0].toBoolean();
  }

  try_isDisputeAllowed(
    assertionID: Bytes,
    disputer: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDisputeAllowed",
      "isDisputeAllowed(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(assertionID),
        ethereum.Value.fromAddress(disputer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  requestAccess(user: Address, _formID: BigInt): boolean {
    let result = super.call(
      "requestAccess",
      "requestAccess(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_formID)
      ]
    );

    return result[0].toBoolean();
  }

  try_requestAccess(
    user: Address,
    _formID: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "requestAccess",
      "requestAccess(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_formID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  requestAdmin(user: Address, _formID: BigInt): boolean {
    let result = super.call(
      "requestAdmin",
      "requestAdmin(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_formID)
      ]
    );

    return result[0].toBoolean();
  }

  try_requestAdmin(
    user: Address,
    _formID: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "requestAdmin",
      "requestAdmin(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_formID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _SismoVerifier(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AssertContributionCall extends ethereum.Call {
  get inputs(): AssertContributionCall__Inputs {
    return new AssertContributionCall__Inputs(this);
  }

  get outputs(): AssertContributionCall__Outputs {
    return new AssertContributionCall__Outputs(this);
  }
}

export class AssertContributionCall__Inputs {
  _call: AssertContributionCall;

  constructor(call: AssertContributionCall) {
    this._call = call;
  }

  get _formID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get contributionCID(): string {
    return this._call.inputValues[1].value.toString();
  }

  get rows(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get proofs(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class AssertContributionCall__Outputs {
  _call: AssertContributionCall;

  constructor(call: AssertContributionCall) {
    this._call = call;
  }
}

export class AssertDatasetCall extends ethereum.Call {
  get inputs(): AssertDatasetCall__Inputs {
    return new AssertDatasetCall__Inputs(this);
  }

  get outputs(): AssertDatasetCall__Outputs {
    return new AssertDatasetCall__Outputs(this);
  }
}

export class AssertDatasetCall__Inputs {
  _call: AssertDatasetCall;

  constructor(call: AssertDatasetCall) {
    this._call = call;
  }

  get _formID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get formCID(): string {
    return this._call.inputValues[1].value.toString();
  }

  get mintPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokenTreasury(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class AssertDatasetCall__Outputs {
  _call: AssertDatasetCall;

  constructor(call: AssertDatasetCall) {
    this._call = call;
  }
}

export class AssertionResolvedCallbackCall extends ethereum.Call {
  get inputs(): AssertionResolvedCallbackCall__Inputs {
    return new AssertionResolvedCallbackCall__Inputs(this);
  }

  get outputs(): AssertionResolvedCallbackCall__Outputs {
    return new AssertionResolvedCallbackCall__Outputs(this);
  }
}

export class AssertionResolvedCallbackCall__Inputs {
  _call: AssertionResolvedCallbackCall;

  constructor(call: AssertionResolvedCallbackCall) {
    this._call = call;
  }

  get assertionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get assertedTruthfully(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AssertionResolvedCallbackCall__Outputs {
  _call: AssertionResolvedCallbackCall;

  constructor(call: AssertionResolvedCallbackCall) {
    this._call = call;
  }
}

export class DisputeAssertionCall extends ethereum.Call {
  get inputs(): DisputeAssertionCall__Inputs {
    return new DisputeAssertionCall__Inputs(this);
  }

  get outputs(): DisputeAssertionCall__Outputs {
    return new DisputeAssertionCall__Outputs(this);
  }
}

export class DisputeAssertionCall__Inputs {
  _call: DisputeAssertionCall;

  constructor(call: DisputeAssertionCall) {
    this._call = call;
  }

  get assertionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class DisputeAssertionCall__Outputs {
  _call: DisputeAssertionCall;

  constructor(call: DisputeAssertionCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get tokenID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class OptimisticFormRequestCall extends ethereum.Call {
  get inputs(): OptimisticFormRequestCall__Inputs {
    return new OptimisticFormRequestCall__Inputs(this);
  }

  get outputs(): OptimisticFormRequestCall__Outputs {
    return new OptimisticFormRequestCall__Outputs(this);
  }
}

export class OptimisticFormRequestCall__Inputs {
  _call: OptimisticFormRequestCall;

  constructor(call: OptimisticFormRequestCall) {
    this._call = call;
  }

  get dataFormatCID(): string {
    return this._call.inputValues[0].value.toString();
  }

  get requestName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get requestDescription(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _details(): OptimisticFormRequestCall_detailsStruct {
    return changetype<OptimisticFormRequestCall_detailsStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }

  get _claims(): Array<OptimisticFormRequestCall_claimsStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      OptimisticFormRequestCall_claimsStruct
    >();
  }

  get formAdmins(): Array<Address> {
    return this._call.inputValues[5].value.toAddressArray();
  }

  get claimGroups(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class OptimisticFormRequestCall__Outputs {
  _call: OptimisticFormRequestCall;

  constructor(call: OptimisticFormRequestCall) {
    this._call = call;
  }
}

export class OptimisticFormRequestCall_detailsStruct extends ethereum.Tuple {
  get category(): string {
    return this[0].toString();
  }

  get requiredEntries(): BigInt {
    return this[1].toBigInt();
  }

  get contributedEntries(): BigInt {
    return this[2].toBigInt();
  }

  get minSubRows(): BigInt {
    return this[3].toBigInt();
  }

  get resolutionDays(): BigInt {
    return this[4].toBigInt();
  }

  get assertions(): Array<Bytes> {
    return this[5].toBytesArray();
  }
}

export class OptimisticFormRequestCall_claimsStruct extends ethereum.Tuple {
  get claimType(): i32 {
    return this[0].toI32();
  }

  get groupId(): Bytes {
    return this[1].toBytes();
  }

  get groupTimestamp(): Bytes {
    return this[2].toBytes();
  }

  get value(): BigInt {
    return this[3].toBigInt();
  }

  get isOptional(): boolean {
    return this[4].toBoolean();
  }

  get isSelectableByUser(): boolean {
    return this[5].toBoolean();
  }

  get extraData(): Bytes {
    return this[6].toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetEscalationManagerCall extends ethereum.Call {
  get inputs(): SetEscalationManagerCall__Inputs {
    return new SetEscalationManagerCall__Inputs(this);
  }

  get outputs(): SetEscalationManagerCall__Outputs {
    return new SetEscalationManagerCall__Outputs(this);
  }
}

export class SetEscalationManagerCall__Inputs {
  _call: SetEscalationManagerCall;

  constructor(call: SetEscalationManagerCall) {
    this._call = call;
  }

  get _EscalationManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetEscalationManagerCall__Outputs {
  _call: SetEscalationManagerCall;

  constructor(call: SetEscalationManagerCall) {
    this._call = call;
  }
}

export class SettleAssertionsCall extends ethereum.Call {
  get inputs(): SettleAssertionsCall__Inputs {
    return new SettleAssertionsCall__Inputs(this);
  }

  get outputs(): SettleAssertionsCall__Outputs {
    return new SettleAssertionsCall__Outputs(this);
  }
}

export class SettleAssertionsCall__Inputs {
  _call: SettleAssertionsCall;

  constructor(call: SettleAssertionsCall) {
    this._call = call;
  }

  get _formID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SettleAssertionsCall__Outputs {
  _call: SettleAssertionsCall;

  constructor(call: SettleAssertionsCall) {
    this._call = call;
  }
}

export class StartResolutionVotingCall extends ethereum.Call {
  get inputs(): StartResolutionVotingCall__Inputs {
    return new StartResolutionVotingCall__Inputs(this);
  }

  get outputs(): StartResolutionVotingCall__Outputs {
    return new StartResolutionVotingCall__Outputs(this);
  }
}

export class StartResolutionVotingCall__Inputs {
  _call: StartResolutionVotingCall;

  constructor(call: StartResolutionVotingCall) {
    this._call = call;
  }

  get assertionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get identifier(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get time(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get ancillaryData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class StartResolutionVotingCall__Outputs {
  _call: StartResolutionVotingCall;

  constructor(call: StartResolutionVotingCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VoteOnAssertionResolutionCall extends ethereum.Call {
  get inputs(): VoteOnAssertionResolutionCall__Inputs {
    return new VoteOnAssertionResolutionCall__Inputs(this);
  }

  get outputs(): VoteOnAssertionResolutionCall__Outputs {
    return new VoteOnAssertionResolutionCall__Outputs(this);
  }
}

export class VoteOnAssertionResolutionCall__Inputs {
  _call: VoteOnAssertionResolutionCall;

  constructor(call: VoteOnAssertionResolutionCall) {
    this._call = call;
  }

  get vote(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get assertionId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class VoteOnAssertionResolutionCall__Outputs {
  _call: VoteOnAssertionResolutionCall;

  constructor(call: VoteOnAssertionResolutionCall) {
    this._call = call;
  }
}
